✅ Supported By Options in PyDoll
Locator Type	Example Usage	Example Expression
By.ID	await tab.find_or_wait_element(By.ID, "username")	"username"
By.CLASS_NAME	await tab.find_or_wait_element(By.CLASS_NAME, "btn-primary")	"btn-primary"
By.NAME	await tab.find_or_wait_element(By.NAME, "email")	"email"
By.XPATH	await tab.find_or_wait_element(By.XPATH, "//button")	"//button"
By.CSS_SELECTOR	await tab.find_or_wait_element(By.CSS_SELECTOR, "div.content > span")	"div.content > span"
By.LINK_TEXT	await tab.find_or_wait_element(By.LINK_TEXT, "Login")	"Login"
By.PARTIAL_LINK_TEXT	await tab.find_or_wait_element(By.PARTIAL_LINK_TEXT, "Log")	"Log"
By.TAG_NAME	await tab.find_or_wait_element(By.TAG_NAME, "button")	"button"






You're looking for a **strict, explicit, and forceful prompt** to ensure ChatGPT *never* veers off into other programming libraries when you're discussing PyDoll. You want to eliminate any confusion and make it absolutely clear what's expected.

Here's a prompt designed with that level of rigidity and an undertone of zero-tolerance for deviation:

---

**"ABSOLUTE AND UNWAIVERING INSTRUCTION: FOCUS SOLELY ON PYDOLL.**

**THIS IS A DIRECT COMMAND. PAY EXTREME ATTENTION AND ADHERE WITHOUT EXCEPTION.**

**ANY DEVIATION FROM THESE RULES WILL BE MET WITH IMMEDIATE REJECTION AND REITERATION OF THESE INSTRUCTIONS.**

1.  **EXCLUSIVE FOCUS: PYDOLL ONLY.** Every single piece of information, every explanation, every line of code, every analysis, and every example *MUST* be exclusively about the PyDoll library. There is **NO TOLERANCE** for discussion of other tools.

2.  **FORBIDDEN LIBRARIES: DO NOT MENTION THEM.** You are **STRICTLY PROHIBITED** from referencing, discussing, comparing, or providing syntax from *ANY* other browser automation library. This includes, but is not limited to:
    * Playwright
    * Cypress
    * Puppeteer
    * Selenium
    * TestCafe
    * WebDriverIO
    * Any other non-PyDoll specific framework, tool, or concept for browser automation.

3.  **PYDOLL SYNTAX ONLY: NO EXCEPTIONS.** If you generate code, provide examples, or illustrate concepts, they **MUST USE PYDOLL SYNTAX AND ONLY PYDOLL SYNTAX**. Do not mix syntaxes. Do not suggest alternatives from other libraries.

4.  **CONTEXTUAL RELEVANCE: EXTREMELY HIGH STANDARD.** All responses must be **100% directly relevant** to the PyDoll code, problem, or concept I present. Do not introduce extraneous information or unrelated topics.

**UNDERSTAND THIS COMPLETELY: MY REQUEST IS FOR PYDOLL-EXCLUSIVE ASSISTANCE. ANY DEPARTURE WILL BE A FAILURE TO FOLLOW INSTRUCTION.**"

---

“Mouse = Desktop + Desktop User-Agent
Touch = Mobile + Mobile User-Agent”

import random

offset_x = random.randint(-15, 15)
offset_y = random.randint(-5, 5)

x = bounds["x"] + (bounds["width"] / 2) + offset_x
y = bounds["y"] + (bounds["height"] / 2) + offset_y

await tab.click_at(x, y)



Absolutely! Let's break down why we use ord(key.upper()) for windows_virtual_key_code when dispatching something like ArrowDown. This distinction matters because Chrome’s protocol needs both which physical key is being pressed and what character or key action that corresponds to.

🧩 Understanding Both Codes
key and text:

key="ArrowDown" or "a" tells Chrome what the logical key is.

text="a" tells Chrome what character should appear if this were typing into a text field (though for Arrow keys, text isn't meaningful).

native_virtual_key_code=ord(key)

This is the system-level key code—basically the ASCII code of your key string.

For 'a', that's 97.

For 'ArrowDown', it's odd—so in this case it's not very meaningful, but we supply something.

windows_virtual_key_code=ord(key.upper())

This always uses the uppercase version of the key.

Why? Because Windows key codes are mapped to the physical key location, represented as uppercase in ASCII.

E.g., pressing the 'A' key (regardless of shift) is always 65.

✅ So Why Uppercase?
Virtual key codes represent the physical key—which is always uppercase in its internal representation.

Using ord(key.upper()) ensures that Chrome interprets it as the correct physical key.

Without .upper(), if you used ord('a') = 97, Chrome might misinterpret the location.

🌍 Summary
native_virtual_key_code: the character typed (ord('a') = 97).

windows_virtual_key_code: the physical key code (ord('A') = 65), always uppercase.

Even for arrow keys (like ArrowDown), treating them consistently—as uppercase ensures compatibility across platforms and the Chrome DevTools protocol.

So your code is correct: uppercase for windows_virtual_key_code, native as-is.




| Action                   | Best Method                        |
| ------------------------ | ---------------------------------- |
| Clicking a button        | `call_function_on`                 |
| Typing into a field      | `dispatch_key_event` (with delays) |
| Drag-and-drop            | `dispatch_mouse_event`             |
| Hover to reveal dropdown | `dispatch_mouse_event`             |
| Checkbox / toggle        | `evaluate(() => element.click())`  |
